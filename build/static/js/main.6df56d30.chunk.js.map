{"version":3,"sources":["asset/Telligro.png","logo.svg","Header.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","classes","this","props","react_default","a","createElement","className","root","AppBar_default","position","Toolbar_default","IconButton_default","menuButton","aria-label","src","logo","Component","withStyles","theme","width","paddingBottom","grow","flexGrow","height","marginLeft","marginRight","title","Object","defineProperty","display","breakpoints","up","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","url","embedUrl","frameSrc","event","setState","target","value","x","document","getElementById","files","reader","FileReader","readAsDataURL","onload","result","bind","style","backgroundColor","src_Header","Row","Col","type","id","onChange","handleFileChange","index_min_default","InputGroup","FormControl","handleChange","Append","Button","onClick","handleClick","lib","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6df56d30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Telligro.1474b427.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport logo from './asset/Telligro.png'\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    paddingBottom: '10px'\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  logo: {\r\n    width: '120px',\r\n    height: '60px'\r\n    },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n});\r\n\r\n\r\nclass Header extends Component {\r\n    \r\n    render(){\r\n        const { classes } = this.props;\r\n        return (\r\n          <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n              <Toolbar>\r\n                <IconButton className={classes.menuButton} aria-label=\"Open drawer\">\r\n                    <img src={logo} className={classes.logo}/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            </AppBar>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Header);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Form, Errors} from 'react-formio';\nimport Iframe from 'react-iframe'\nimport {Row, Col, InputGroup, FormControl, Button} from 'react-bootstrap'\nimport Header from './Header';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n  }\n\n  state={\n    url : \"\",\n    embedUrl : \"\",\n    frameSrc : \"\"\n  }\n\n  handleChange(event){\n    this.setState({\n      url:event.target.value\n    })\n  }\n\n  handleFileChange(event){\n    var x = document.getElementById(\"myFile\").files[0];\n    var reader = new FileReader();\n    reader.readAsDataURL(x);            \n    reader.onload = function () {\n            this.setState({\n              frameSrc: reader.result\n            })\n    }.bind(this);\n  }\n\n  handleClick(){\n    this.setState({\n      embedUrl: this.state.url\n    })\n    document.getElementById(\"formio-div\").style.backgroundColor=\"white\";\n  }\n\n  render() {\n    return (\n      <div>\n          <Header/>\n          <Row>\n            <Col className=\"justify-content-md-center\">\n              <input type=\"file\" id=\"myFile\" onChange={this.handleFileChange.bind(this)}></input>\n              <Iframe url={this.state.frameSrc} width=\"90%\" height=\"700px\"/>\n            </Col>\n            <Col className=\"justify-content-md-center\">\n            <InputGroup>\n              <FormControl type=\"text\" aria-label=\"With textarea\" onChange={this.handleChange.bind(this)}/>\n              <InputGroup.Append>\n                <Button onClick={this.handleClick.bind(this)}>Fill Form</Button>\n              </InputGroup.Append>\n            </InputGroup>\n              <div className=\"formio-div\" id=\"formio-div\">\n                <Form src={this.state.embedUrl} >\n                </Form>\n              </div>\n            </Col>\n          </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}